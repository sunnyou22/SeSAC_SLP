//
//  SignInViewModel.swift
//  SeSAC_SLP
//
//  Created by Î∞©ÏÑ†Ïö∞ on 2022/11/09.
//

import RxCocoa
import RxSwift
import Alamofire
import Foundation

final class SignInViewModel {
    static var test: BehaviorRelay<Bool> = BehaviorRelay(value: false)
//    let signup = PublishSubject<SignUp>()
//    let login = PublishSubject<LogIn>()
    let textfield: BehaviorRelay<String> = BehaviorRelay(value: "")
    var buttonValid: BehaviorRelay<Bool> = BehaviorRelay(value: false)
    var nextbutton: ControlEvent<Void>?
    
    //MARK: ÎãâÎÑ§ÏûÑ - ÌååÏùºÎß§ÎãàÏ†ÄÎ°ú Î∫ÑÍ±¥ÏßÄ Í≥†ÎØº
    func signUpNetwork(nick: String, FCMtoken: String, phoneNumber: String, birth: Date, email: String, gender: Int, idtoken: String, completion: @escaping ((Error) -> Void)) {
        
        let api = SeSACAPI.signUp(phoneNumber: phoneNumber, FCMtoken: FCMtoken, nick: nick, birth: birth, email: email, gender: gender)
        
        Network.shared.requestSeSAC(type: SignUp.self, url: api.url, parameter: api.parameter, method: .post, headers: api.getheader(idtoken: idtoken)) { response in
            LoadingIndicator.showLoading()
            switch response {
            case .success(let success):
                print(success)
                print("ÌöåÏõêÍ∞ÄÏûÖÏÑ±Í≥µ ‚úÖ")
                LoadingIndicator.hideLoading()
//                self?.signup.onNext(success) // Íµ¨Ï°∞Ï≤¥ÏïàÏóê Îç∞Ïù¥ÌÑ∞Î•º ÎÑ£Ïùå
            case .failure(let failure):
                print("ÌöåÏõêÍ∞ÄÏûÖ ÏóêÎü¨ üî¥")
                LoadingIndicator.hideLoading()
//                self?.signup.onError(failure) // ÏóêÎü¨Ïóê ÎßûÍ≤å Î∞∑Ìãà SeSAC_SLP.SignUpError.InvaliedNickName
                completion(failure)
            }
        }
    }
    
    func logInNetwork(idtoken: String, successCompletion: @escaping ((LogIn) -> Void), errrorCompletion: @escaping ((Error) -> Void))  {
        let api = SeSACAPI.logIn
        
        Network.shared.requestSeSAC(type: LogIn.self, url: api.url, parameter: nil, method: .get, headers: api.getheader(idtoken: idtoken)) { response in
            
            LoadingIndicator.showLoading()
            
            switch response {
            case .success(let success):
                print("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ‚úÖ", success)
                //                self?.login.onNext(success)
                LoadingIndicator.hideLoading()
                successCompletion(success)
            case .failure(let failure):
                print("Î°úÍ∑∏Ïù∏ Ïã§Ìå® üî¥")
                //                self?.login.onError(failure)
                LoadingIndicator.hideLoading()
                errrorCompletion(failure)
            }
        }
    }
}


